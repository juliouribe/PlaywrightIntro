Starting a new app with latest or a specific version
  npm init playwright@latest

  package.json -- node project management file
  playwright.config.js -- playwright configuration file
  tests -- target location for playwright tests

Check playwright version
  npm playwright -v

Run tests. The test directory is also defined in the playwright config file
  npx playwright test
  npx playwright test --headed      // still not sure what headed means
  npx playwright test HomePageTest.spec.js    // run a single test
  npx playwright test --project=chromium    // single browser
  npx playwright test --debug     // use step by step debugging execution
  npx playwright test tests/todo-page/ tests/landing-page/  // run directories of tests

More recent playwright, run with UI mode on.
  npx playwright test --ui

Open html report of tests
  npx playwright show-report

For each test, they need the .spec.js extension. At the top of the file always
  import { test, expect }  from '@playwright/test';

When writing the test, page.goto is async so we need to await. Then we can use
the page object for different assertions. Promises are commonly returned. You
need to away expects, page.goto, and other methods.

  await expect(page).toHaveTitle('STORE');
  await expect(page).toHaveURL('https://www.demoblaze.com/index.html');
  const pageTitle = await page.title();


So far the attributes we've seen for page are
  const pageTitle = await page.title();
  const pageURL = page.url();

Locating elements is very important. We can use the property, css, or xpath of
an element to locate them. .click() can locate before clicking or you can add
.click() after a .locator() call.

  await page.locator('locator');
  await page.click('locator');

The above is good for a single element. For grabbing multiple web elements with
the same selector, we can use page.$$(locator).

When locating multiple elements, they may not have all loaded and you can end up
with flaky results. You can specifically wait for things to load using something
like below.

Use page.waitForSelector to load an element.
  await page.waitForSelector("#tbodyid");


Basic Actions
  locator.check()	Check the input checkbox
  locator.click()	Click the element
  locator.uncheck()	Uncheck the input checkbox
  locator.hover()	Hover mouse over the element
  locator.fill()	Fill the form field, input text
  locator.focus()	Focus the element
  locator.press()	Press single key
  locator.setInputFiles()	Pick files to upload
  locator.selectOption()	Select option in the drop down

Sample codegen command. You can optionally include the url.
  npx playwright codegen demo.playwright.dev/todomvc


Questions for Laura
- Which version of playwright do you use?
- Do you use codegen?
- Perhaps share trying to select multiple
elements where you may need to wait for loading. Table rows, nested elements, etc.
- What's the relationship like with clients? Do client web pages tend to have consistent
structure within companies or are tests kind of difficult and page specific?
